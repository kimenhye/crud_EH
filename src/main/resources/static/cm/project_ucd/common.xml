<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml"
xmlns:ev="http://www.w3.org/2001/xml-events"
xmlns:w2="http://www.inswave.com/websquare"
xmlns:xf="http://www.w3.org/2002/xforms">
	<head>
		<w2:type>COMPONENT</w2:type>
		<w2:buildDate/>
		<w2:publicInfo method="scwin.initCommonMenu,scwin.getHeaderType,scwin.getSideType,
							   scwin.openMenu,scwin.setLayoutType, 
		                       scwin.getLayoutType, scwin.setLayoutId, scwin.getMenuInfo, 
		                       scwin.setCommonCode,scwin.getCodeDataListInfo,
		                       scwin.executeSubmission,scwin.executeSubmission_dynamic,scwin.getResultCode,_sbm_defCallbackSubmission,
		                       scwin.createDataList,scwin.createDataMap,
		                       scwin.alert,scwin.messagBox,scwin.confirm,scwin.openPopup,scwin.closePopup" >
    	</w2:publicInfo>
		<xf:model>

			<w2:dataCollection baseNode="map">
        		 <w2:dataMap baseNode="map" id="dma_commonCode">
        			<w2:keyInfo>

        				<w2:key id="GRP_CD" name="GRP_CD" dataType="text"></w2:key>
         				<w2:key id="DATA_PREFIX" name="name2" dataType="text"></w2:key>
        				<w2:key id="SCOPE_ID" name="name3" dataType="text"></w2:key>
        			</w2:keyInfo>
        		</w2:dataMap> 
        		<w2:dataList baseNode="list" repeatNode="map" id="dlt_codeList" saveRemovedData="true">
        			<w2:columnInfo>
        				<w2:column id="CODE_NM" name="CODE_NM" dataType="text"></w2:column>
        				<w2:column id="COM_CD" name="COM_CD" dataType="text"></w2:column>
        				<w2:column id="GRP_CD" name="GRP_CD" dataType="text"></w2:column>

        			</w2:columnInfo>
        		</w2:dataList>

        	</w2:dataCollection>
			<w2:workflowCollection>
			</w2:workflowCollection>
	    	<xf:submission id="sbm_menuData" ref="" target="data:json,dataList1" action="" method="post" mediatype="application/json"
	    			encoding="UTF-8" instance="" replace="" errorHandler="" customHandler="" mode="asynchronous" processMsg="" ev:submit=""
	    			ev:submitdone="scwin.sbm_menuData_submitdone" ev:submiterror="" abortTrigger="">
    		</xf:submission>
        	<xf:submission id="sbm_selectCodeList" ref='data:json,{"id":"dma_commonCode","key":"dma_commonCode"}' target="" action="" method="get" mediatype="application/json" encoding="UTF-8"
        		instance="" replace="" errorHandler="" customHandler="" mode="asynchronous" processMsg="" ev:submit=""
        		ev:submitdone="scwin.sbm_selectCodeList_submitdone" ev:submiterror="" abortTrigger="">
        	</xf:submission>    		

		</xf:model>
		<w2:layoutInfo>
		</w2:layoutInfo>
		<script type="text/javascript" lazy="false"><![CDATA[
		
//메뉴관련 array
	scwin.menuCallBackArr = [];
   // 메뉴 관련 변수 셋팅 START
	scwin.COMMON_MENU_INFO   =  {
								  DATA_LIST       : "dlt_menu",   //시스템 오픈시 권한에 따른 전체 메뉴를 관리하는 DATA LIST
								  LEVEL_FIELD     : "MENU_LEVEL",      //메뉴DEPTH
								  ID_FIELD        : "MENU_CD",         //메뉴코드 ( ID )
								  NAME_FIELD      : "MENU_NM",         //메뉴한글
								  SRC_FIELD       : "SRC_PATH",        //메뉴 화면 URL
								  PARENT_FIELD    : "PARENT_MENU_CD",  //상위 메뉴 코드 (ID)
								  FILED_ARR       : [ "BIZ_TYPE"] 
						        };
	scwin.MENU_COMPONENT_TYPE =  {
									SIDE   : "2",  // WFRAME일 경우 '1', UDC일 경우 '2' , 메인 LAYOUT과 하나의 페이지로 구성되어 있을 경우 '3'
									HEADER : "2"   // WFRAME일 경우 '1', UDC일 경우 '2' , 메인 LAYOUT과 하나의 페이지로  구성되어 있을 경우 '3'   
			                      };
			                      
    scwin.LAYOUT_TYPE       = "T";// 메인 LAYOUT 의 MDI가 TAB CONTROL일 경우 'T' , WINDOW CONTAINER 일 경우 'M', SDI 일 경우 'S'
    scwin.LAYOUT_ID         = "";  // 메인 LAYOUT 의 MDI가 TAB CONTROL ID or  WINDOW CONTAINER ID
        
	if ( scwin.LAYOUT_TYPE == "T" ){
		scwin.LAYOUT_ID =  "tac_layout" ;
	} else if ( scwin.LAYOUT_TYPE == "M" ){
		scwin.LAYOUT_ID =  "wdc_main" ;
	} else if ( scwin.LAYOUT_TYPE == "S" ){
		scwin.LAYOUT_ID =  "wfm_main";
	} 
	
	scwin.selMenuAction = "/main/init";
	scwin.codeActionMethod = "post";
   // 메뉴 관련 변수 셋팅 END

   // 코드 관련 변수 셋팅 START
	scwin.scopeList = [];
	scwin.codeListAll = []; 

	scwin.COMMON_CODE_INFO = {
		DATALIST : "dlt_codeList",             //코드 공통WFRAME컴포넌트에서 사용할 DataList 명
		LABEL : "CODE_NM",                     //코드 공통WFRAME컴포넌트의  label 필드명
		VALUE : "COM_CD",                      //코드 공통WFRAME컴포넌트의  value 필드명
		GROUP_COLUMN : "GRP_CD",               //코드 공통WFRAME컴포넌트의  code 그룹( 분류코드 ) 필드명
		FILED_ARR : [ "CODE_NM","COM_CD","GRP_CD"  ]  //코드 공통WFRAME컴포넌트의  DataList의 필드 조합 
	};

	

	scwin.selCodeAction = "/common/selectCodeList";  // 코드조회 서비스  URL - 예 ) /codeService.do , /codeService.jsp 등
	scwin.codeActionMethod = "post";
	scwin.DATA_PREFIX = "list_";          // 코드조회 data 의  json 객체 prefix
	                                               //예) list_00019: [{SORT_ORDER: 1, GRP_CD: "00019", COM_CD: "01", CODE_NM: "PM"},…] 
   // 코드 관련 변수 셋팅 end
   
   
   
   
   //팝업관련 변수 셋팅 start
   
   // 메세지 알림 콜백 Function 정보 저장
	scwin.CB_FUNCTION_MANAGER = {
		cbFuncIdx : 0, // 정보 저장 Index Key
		cbFuncSave : {}
	// 정보 저장 객체
	}


   //팝업관련 변수 셋팅 end

	scwin.onpageload = function() {
        
	};

/////////////////////////////////////////////////
/////////////////////////////////////////////////
//		                                       //
//		main menu 관련  project udc start        //
//		                                       //
/////////////////////////////////////////////////	
/////////////////////////////////////////////////	
 /**
  * @method
  * @name initCommonMenu
  * @description $c.common.menu 초기화 함수 ( menu dataList 동적생성  , 메뉴조회  )
  * @param <object> _$p 호출한 페이지의 scope 객체 
  * @param <object> _callBack 호출한 화면에서 메뉴리스트 조회후 후처리 함수 
  * @hidden N
  * @exception 
  * @sample 
  */ 
 
 	scwin.initCommonMenu = function ( _$p , _callBack ){
		scwin.menuCallBackArr.push(_callBack); // call back함수 - menu data를 서버에서 가져온 다음에 side/header 화면 등에 메뉴데이타를 set하기 위한 콜백함수
		scwin.createCommonMenuDataList();				
	};
	
	
	scwin.getMenuInfo = function(){
		return scwin.COMMON_MENU_INFO;
	};
   /**
    * @method
    * @name getHeaderType
    * @description 메인화면 상단 헤더의 컴퍼넌트 타입 조회
    * @return <string> WFRAME일 경우 '1', UDC일 경우 '2' 
  	* @param <object> _$p 호출한 페이지의 scope 객체 
    * @hidden N
    * @exception 
    * @sample 
    */ 
 
   scwin.getHeaderType = function( _$p ){
   		return scwin.MENU_COMPONENT_TYPE.HEADER;
   };
   
   
  
 /**
  * @method
  * @name getSideType
  * @description 메인화면 (좌측) 메뉴의 컴퍼넌트 타입 조회
  * @return <string> WFRAME일 경우 '1', UDC일 경우 '2' 
  * @param <object> _$p 호출한 페이지의 scope 객체 
  * @hidden N
  * @exception 
  * @sample 
  */
  
  scwin.getSideType = function( _$p ){
   		return scwin.MENU_COMPONENT_TYPE.SIDE;
   };	

   
 /**
  * @method
  * @name getLayoutType
  * @description main MDI가 TabCONTROL일 경우 'T' , WINDOW CONTAINER 일 경우 'M'
  * @return <string> TABCONTROL일경우 'T' , WINDOW CONTAINER 일 경우 'M'
  * @param <object> _$p 호출한 페이지의 scope 객체 
  * @hidden N
  * @exception 
  * @sample 
  */   	
   scwin.getLayoutType = function(_$p ){
		return scwin.LAYOUT_TYPE;
   };
   
 /**
  * @method
  * @name setLayoutType
  * @description main 화면에서 tabControl  , WINDOW CONTAINER을 변경하는 경우 셋팅
  * @param <object> _$p 호출한 페이지의 scope 객체 
  * @param <String> type TABCONTROL일경우 'T' , WINDOW CONTAINER 일 경우 'M' 
  * @hidden N
  * @exception 
  * @sample 
  */ 
   scwin.setLayoutType = function( _$p, type){
		scwin.LAYOUT_TYPE = type;
	   
	};
	
	
	scwin.setLayoutId = function( _$p, id){
		scwin.LAYOUT_ID =  id;
	   
	}; 

	/**
	 * @method
	 * @name createCommonMenuDataList
	 * @description $c.common 메뉴 dataList 동적생성
	 * @hidden Y
	 * @exception 
	 * @sample 
	 */ 
	scwin.createCommonMenuDataList = function(){
		var columnInfoJson = {};
		var columnInfoList = [];

		scwin.COMMON_MENU_INFO.FILED_ARR.push(scwin.COMMON_MENU_INFO.LEVEL_FIELD);
		scwin.COMMON_MENU_INFO.FILED_ARR.push(scwin.COMMON_MENU_INFO.ID_FIELD);
		scwin.COMMON_MENU_INFO.FILED_ARR.push(scwin.COMMON_MENU_INFO.NAME_FIELD);
		scwin.COMMON_MENU_INFO.FILED_ARR.push(scwin.COMMON_MENU_INFO.SRC_FIELD);
		scwin.COMMON_MENU_INFO.FILED_ARR.push(scwin.COMMON_MENU_INFO.PARENT_FIELD);


		var len = scwin.COMMON_MENU_INFO.FILED_ARR.length;
		
		
		for( var j = 0 ; j < len ; j++){
			columnInfoJson = {
				"id"   : scwin.COMMON_MENU_INFO.FILED_ARR[j],
				"name" : scwin.COMMON_MENU_INFO.FILED_ARR[j],
				"dataType" : "text"
			};	
			columnInfoList.push(columnInfoJson);
		}
		
		scwin.createDataList ( $p , scwin.COMMON_MENU_INFO.DATA_LIST , columnInfoList );
		
//		var dlt_options = {
//				"id" : scwin.COMMON_MENU_INFO.DATA_LIST,
//				"type" : "dataList",
//				"option":{ 
//		                "baseNode":"list" ,
//		               "repeatNode":"map"
//						},
//		        "columnInfo": columnInfoList 
//		};
//		$p.data.create( dlt_options );

		scwin.getTranMenuData();
	}; 	
	
	/**
	 * @method
	 * @name getTranMenuData
	 * @description $c.common 의 메뉴 데이터 조회 함수
	 * @hidden Y
	 * @exception 
	 * @sample 
	 */ 
	scwin.getTranMenuData = function( ){
		
		
		
		var submit = $p.getSubmission("sbm_menuData");
		submit.action = scwin.selMenuAction;
		submit.target = "data:json,"+scwin.COMMON_MENU_INFO.DATA_LIST;
		$p.executeSubmission(sbm_menuData);
	};
	
	scwin.sbm_menuData_submitdone = function(e) {
		var jsonData = $p.getComponentById("dlt_menu").getAllJSON();
		scwin.menuCallBackArr[0]( jsonData );
		
		scwin.menuCallBackArr.shift(); // 배열의 첫번째 요소를 제거
		
	};
	
	

	/**
	 * @method
	 * @name openMenu
	 * @description 메뉴클릭시 TAB CONTROL, WINDOW CONTAINER에 화면추가하기 위한 함수 
	 * @param <object:N> _$p desc
 	 * @param <object:Y> menuInfo 화면url , 화면ID, 화면명 등을 설정한 객체 
 	 * @param <object:N> 화면오픈시 화면에 전달할 데이터 객체 
	 * @hidden N
	 * @exception 
	 * @sample 
	 */ 
	scwin.openMenu = function( _$p, menuInfo , data){
	    if ( data == null || typeof   data == "undefined" ){
			data = menuInfo;    
		} else {
			Object.assign( data , menuInfo );
		}
			
		if ( scwin.LAYOUT_TYPE == "T" ){ // 시스템 메인이 TAB CONTROL로 구성되어 있음. 
			scwin.addTab( _$p, menuInfo   , data);
		} else if ( scwin.LAYOUT_TYPE == "M" ){
			scwin.addWindows(_$p, menuInfo  , data);
		} else {
			scwin.replaceWindows(_$p, menuInfo  , data);
		}
	};
	
	scwin.replaceWindows  = function(_$p,  menuInfo , data){
		var win_main = _$p.top().$p.getComponentById(scwin.LAYOUT_ID);
		var url = menuInfo[scwin.COMMON_MENU_INFO.SRC_FIELD];
		var obj = { 
            dataObject: {"type" : "json","name" : "param","data" : data  } 
        }; 
        
		//현재화면과 동일한 화면을 오픈할  경우 return;
		
        if ( win_main.getSrc() == url ) return;   
		win_main.setSrc(url, obj);
		
	};

	scwin.addWindows  = function(_$p,  menuInfo  , data){
		var win_main = _$p.top().$p.getComponentById(scwin.LAYOUT_ID);
		
		var menuId = menuInfo[scwin.COMMON_MENU_INFO.ID_FIELD];
		var menuNm = menuInfo[scwin.COMMON_MENU_INFO.NAME_FIELD];
		var url = menuInfo[scwin.COMMON_MENU_INFO.SRC_FIELD];
		var frameMode =  menuInfo.frameMode || "wframe"
		var openAction = menuInfo.openAction || "existWindow" ; // 새창으로 열기. // exist/select/new
			
		var options = {
			title : menuNm,
			src : url,
			windowTitle : menuNm,
			windowId : menuId,
			openAction : openAction,
			frameMode : frameMode,
			dataObject : { 
				type : "json", 
				name : "param", 
				data : data
			}
		}
		
		
		win_main.createWindow( options );

		//win_main.getFrame(options.windowId).focus();
	};
	

	scwin.addTab  = function( _$p, menuInfo , data ){ 
		var menuId = menuInfo[scwin.COMMON_MENU_INFO.ID_FIELD] || "";
		var menuNm = menuInfo[scwin.COMMON_MENU_INFO.NAME_FIELD] || "" ;
		var url = menuInfo[scwin.COMMON_MENU_INFO.SRC_FIELD] || "" ;
		var openAction = menuInfo.openAction || "select" ; // 새창으로 열기. // exist/select/new
		var frameMode = menuInfo.frameMode || "wframePreload";

		var closable = menuInfo.closable   ;
		if( typeof closable === "undefined" || closable == "true" || closable === true ){
			closable =  true;
		} else {
			closable = false;
		}
		
		

		var scope = menuInfo.scope || true  ;
		if( scope == "false" || !scope ){
			scope =  false;
		} else {
			scope = true;
		}
		
		
		
		var tabOptions = {
				label : menuNm || "",
				openAction : openAction , 
				closable : closable
			};
		var contentsOptions = {
				frameMode : frameMode,
				wframe : true,
				scope: scope ,
				src : url,
				dataObject : { 
					type : "json", 
					name : "param", 
					data : data
				}
		};
		
		var tab_main = _$p.top().$p.getComponentById(scwin.LAYOUT_ID);
		
		var tabID = tab_main.addTab(menuId, tabOptions, contentsOptions);
		var tabIndex = tab_main.getTabIndex( tabID );
		
		if( !tab_main.isLoaded( tabIndex ) ){
			tab_main.setSelectedTabIndex( tabIndex );
		} 
	};



/////////////////////////////////////////////////
/////////////////////////////////////////////////
//		                                       //
//		main menu 관련  project udc end          //
//		                                       //
/////////////////////////////////////////////////	
/////////////////////////////////////////////////	

	
/////////////////////////////////////////////////
/////////////////////////////////////////////////
//		                                       //
//		common code project udc start          //
//		                                       //
/////////////////////////////////////////////////	
/////////////////////////////////////////////////
	

/**
 * 코드조회를 수행하거나, commonCodeProject page 의 dlt_codeList 에 해당 코드 group( 분류코드 )  데이타가 있는지 체크한다. 
 *
 * @date 2020.02.01
 * @param {Object} _$p setCommonCode를 호출한 화면의 scope을 가진 WebSquare util 객체
 * @param {Object} {Object} codeOptions {"code" : "코드그룹(분류)-필수", "callBackFunc" : "콜백함수" , "compID" : "적용할 컴포넌트" 
 *                                       "dataList" : "데이타리스트명" , "wframeId" : "WFRAME 아이디" , "addOption" :"데이타추가여부" , "udcId" : "UDC 아이디" , "gridView" : "그리드뷰인지 유부 ( TRUE/FLASE ) }
 * @memberOf commonCodeProject
 * @author InswaveSystems
 * @example
 *      var codeOptions = [ 
 * 		    	            // 1. 메인화면 콤백 함수에서 공통코드 데이타 처리  CASE 
 * 			                { code : "00001", callBackFunc : "scwin.setDataList" },
 * 				            // 2. 메인화면 SELECTBOX 중 데이타 LIST BINDING 되어 있는 경우 공통코드 셋팅하는 CASE
 * 				            { code : "00002", compID : "sel_combo2"  },
 * 				            // 3. 메인화면 SELECTBOX 중 데이타 LIST BINDING 되어 있는지 않는 경우 DATACOLLECTION 생성후  공통코드 셋팅하는 CASE
 * 				            { code : "00003", compID : "sel_combo3" },
 * 				            // 4. 메인화면 데이타 리스트에   공통코드 셋팅하는 CASE ( 데이타리스트 존재햐야함 ) 
 * 				            { code : "00004", dataList : "dlt_codeSample2" , addOption : false},
 * 				            // 5. wframe 콤백 함수에서 공통코드 데이타 처리  CASE 
 * 				            { code : "00005", callBackFunc : "scwin.setDataList", wframeId: "wframe_code1"}, 
 * 				            // 6. wframeC SELECTBOX 중 데이타 LIST BINDING 되어 있는 경우 공통코드 셋팅하는 CASE
 * 				            { code : "00006", compID : "selCommonCode"  , wframeId: "wframe_code2" },
 * 				            // 7. wframe SELECTBOX 중 데이타 LIST BINDING 되어 있는지 않는 경우 DATACOLLECTION 생성후  공통코드 셋팅하는 CASE
 * 				            { code : "00007", compID : "selCommonCode"  , wframeId: "wframe_code3" },
 * 				            // 8. wframe데이타 리스트에   공통코드 셋팅하는 CASE ( 데이타리스트 존재해야함 )
 * 				            { code : "00011", dataList : "dltCodeList" , wframeId: "wframe_code4" , addOption : false  },
 * 				            // 9. UDC 콤백 함수에서 공통코드 데이타 처리  CASE 
 * 				            { code : "00012", callBackFunc : "setDataList" , udcId: "udc_code1" },
 * 				            // 10. 메인화면 그리드에  inputtype select 인것  DATACOLLECTION 생성후  공통코드 셋팅하는 CASE
 * 			  	            { code : "00001", compID : "grd_sample:col1" , gridView : true}
 *             		     ];
 *      com.code.setCommonCode( codeOptions );
 */
 	
	scwin.setCommonCode  = function( _$p , codeOptions , mainCallBackFunc ) {
		var codeOptionsLen = 0;
		if (codeOptions) {
			codeOptionsLen = codeOptions.length;
		} else {
			return;
		}
		var dltCodeList = $p.getComponentById(scwin.COMMON_CODE_INFO.DATALIST);
		
		var codeObj ;
		var paramCode = "";
		var  j = 0;
		for (var i = 0; i < codeOptionsLen; i++) {
			dltCodeList.removeColumnFilterAll();
			dltCodeList.setColumnFilter( {type:'row', colIndex:scwin.COMMON_CODE_INFO.GROUP_COLUMN, key:codeOptions[i].code, condition:'and'});
			if ( dltCodeList.getAllFilteredJSON().length == 0 ){
				if (j > 0) {
					paramCode += ",";
				}
				j++;
				paramCode += codeOptions[i].code;
			}
			dltCodeList.removeColumnFilterAll();
		}
		if (paramCode !== "" && paramCode != "") {
			
			
			var columnInfoJson = {};
			var columnInfoList = [];
		
			
			dma_commonCode.set("DATA_PREFIX", scwin.DATA_PREFIX);
			dma_commonCode.set("GRP_CD", paramCode);
			var scopeId = scwin.getScopeId( _$p );
			var scopeOpt = { "key" : scopeId , "value" : _$p , "option" : codeOptions };
			
			if ( typeof mainCallBackFunc !== "undefined" ){
				scopeOpt.callBackFunc = mainCallBackFunc;
			}
			
			
			dma_commonCode.set("SCOPE_ID", scopeId);
			
			
			scwin.scopeList.push(scopeOpt );
			var submit = $p.getSubmission("sbm_selectCodeList");
			
			submit.action = scwin.selCodeAction;
			var codeActionMethod = scwin.codeActionMethod || "post";
			submit.method = scwin.codeActionMethod;
			
			var sbum = $p.getSubmission("sbm_selectCodeList");
			
			$p.executeSubmission(sbm_selectCodeList);
		} else {
			scwin.dataSetFunc(_$p, codeOptions , mainCallBackFunc  );
		}		
	};        

/**
 * 코드조회를 후 submit-done함수 . 
 * commonCodeProject page 의 dlt_codeList 에 코드list를 add  
 *
 * @date 2020.02.01
 * @param {Object} service response 객체
 * @memberOf commonCodeProject
 * @author InswaveSystems
 */
	scwin.sbm_selectCodeList_submitdone = function(e) {
			var json = JSON.parse( e.requestBody ) ;
			var inx = -1;
			for( var i = 0 ; i <  scwin.scopeList.length ; i++){
				if ( scwin.scopeList[i].key ==  json.dma_commonCode.SCOPE_ID ){
					inx = i;
				}
			}
			if ( inx < 0 ) return;
			var scopeOpt = scwin.scopeList.splice(inx,1);
			var _$p = scopeOpt[0].value;
			var codeOptions =  scopeOpt[0].option;
			var resJSON = e.responseJSON;
			var codeListStr = json.dma_commonCode.GRP_CD;
			var codelistSplit = codeListStr.split(",");
			var dltCodeList = $p.getComponentById(scwin.COMMON_CODE_INFO.DATALIST);
			
			var mainCallbackFunc;
			if ( typeof scopeOpt[0].callBackFunc !== "undefined" ){
				mainCallbackFunc = scopeOpt[0].callBackFunc;
			}
			
			for( var i = 0 ; i < codelistSplit.length ; i++){
				dltCodeList.setColumnFilter( {type:'row', colIndex:scwin.COMMON_CODE_INFO.GROUP_COLUMN, key:codelistSplit[i], condition:'and'});
				if ( dltCodeList.getAllFilteredJSON().length <= 0 ){
					dltCodeList.setJSON( resJSON[ scwin.DATA_PREFIX +codelistSplit[i]  ] , true);
				}
				dltCodeList.removeColumnFilterAll();
			}			
			scwin.dataSetFunc( _$p, codeOptions , mainCallbackFunc );
	};


/**
 * 메인화면에 codeOption에 따라서 공통코드 셋팅함다.
 *
 * @date 2020.02.01
 * @param {Object} _$p setCommonCode를 호출한 화면의 scope을 가진 WebSquare util 객체
 * @param {Object} {Object} codeOptions {"code" : "코드그룹(분류)-필수", "callBackFunc" : "콜백함수" , "compID" : "적용할 컴포넌트" 
 *                                       "dataList" : "데이타리스트명" , "wframeId" : "WFRAME 아이디" , "addOption" :"데이타추가여부" , "udcId" : "UDC 아이디" , "gridView" : "그리드뷰인지 유부 ( TRUE/FLASE ) }
 * @memberOf commonCodeProject
 * @author InswaveSystems
 */
	scwin.dataSetFunc = function(  _$p, codeOption , mainCallbackFunc ){
		
		
		var scopeId = _$p.id;
		var dltCodeList = $p.getComponentById(scwin.COMMON_CODE_INFO.DATALIST);
		for( var i = 0 ; i < codeOption.length ; i++){
			dltCodeList.removeColumnFilterAll();
			var  paramOption = codeOption[i];
			var code =  paramOption.code ;
			dltCodeList.removeColumnFilterAll();
			dltCodeList.setColumnFilter( {type:'row', colIndex:scwin.COMMON_CODE_INFO.GROUP_COLUMN, key:code, condition:'and'});
			var datajson = dltCodeList.getAllFilteredJSON();
			if ( typeof paramOption.callBackFunc !== "undefined" && paramOption.callBackFunc  ){
				var funcName = paramOption.callBackFunc;
				if ( typeof paramOption.wframeId !== "undefined" ){
					// 5. wframe 콤백 함수에서 공통코드 데이타 처리  CASE 
					eval (  scopeId + paramOption.wframeId + ".getWindow()."+funcName +"( datajson, code)" );
				} else if ( typeof paramOption.udcId !== "undefined" ){
					
					funcName = funcName.replaceAll( "scwin.", "");
					eval (  scopeId +paramOption.udcId + "."+funcName +"( datajson, code)" );
				} else {
					//( CASE 1) 메인화면 콤백 함수에서 공통코드 데이타 처리  CASE
					eval (scopeId + funcName +"( datajson, code)" );
				}
			} else if ( typeof paramOption.compID !== "undefined" && paramOption.compID){
				var compNm = paramOption.compID ;
				var dataListId = "";
				var gridId = "";
				if ( typeof paramOption.wframeId === "undefined" || paramOption.wframeId == "" ){
					if ( typeof paramOption.gridView === "undefined" || paramOption.gridView == "" ){
						//  ( CASE 2 OR CASE 3 or case6 )메인화면 SELECTBOX 에 공통코드 셋팅
						dataListId =  _$p.getComponentById(  paramOption.compID ).getDataListInfo().id ;
					} else if (  paramOption.gridView ){
						// 10. 메인화면 그리드에  inputtype select 인것  DATACOLLECTION 생성후  공통코드 셋팅하는 CASE
						var tmpIdArr = paramOption.compID.split(":");
						gridId = "_"+ tmpIdArr[0];
					}
				}
				if ( typeof dataListId !== "undefined" && dataListId != ""){
					if ( typeof paramOption.wframeId === "undefined" || paramOption.wframeId == ""){
					// 2. 메인화면 SELECTBOX 중 데이타 LIST BINDING 되어 있는 경우 공통코드 셋팅하는 CASE
					// 10. 메인화면 그리드에  inputtype select 인것  DATACOLLECTION 생성후  공통코드 셋팅하는 CASE
						_$p.getComponentById( dataListId ).setJSON (datajson);
					} else {
						// 6. wframeC SELECTBOX 중 데이타 LIST BINDING 되어 있는 경우 공통코드 셋팅하는 CASE
						var wframe = _$p.getComponentById(paramOption.wframeId  ).getWindow();
						wframe.$p.getComponentById( dataListId ).setJSON (datajson);
					}
				} else {
					var columnInfoJson = {};
					var columnInfoList = [];
					var len = scwin.COMMON_CODE_INFO.FILED_ARR.length;
					for( var j = 0 ; j < len ; j++){
						columnInfoJson = {
							"id"   : scwin.COMMON_CODE_INFO.FILED_ARR[j],
							"name" : scwin.COMMON_CODE_INFO.FILED_ARR[j],
							"dataType" : "text"
						};	
						columnInfoList.push(columnInfoJson);
					}
					var options = {
									"id" : scwin.COMMON_CODE_INFO.DATALIST+"_"+paramOption.code + gridId,
									"type" : "dataList",
									"option":{ 
							                "baseNode":"list" ,
							               "repeatNode":"map"
											},
							        "columnInfo": columnInfoList 
								 };
					if ( typeof paramOption.wframeId === "undefined" || paramOption.wframeId == ""){	
						// 3. 메인화면 SELECTBOX 중 데이타 LIST BINDING 되어 있는지 않는 경우 DATACOLLECTION 생성후  공통코드 셋팅하는 CASE
						if ( typeof paramOption.gridView === "undefined"  || paramOption.gridView == ""  ){
							_$p.data.create( options );
							_$p.getComponentById( paramOption.compID ).setNodeSet("data:" +options.id, 
													 scwin.COMMON_CODE_INFO.LABEL , 
													 scwin.COMMON_CODE_INFO.VALUE);
							_$p.getComponentById( options.id ).setJSON (datajson);
						} else if (  paramOption.gridView ){
							 _$p.data.create( options );

							 var gridObj = _$p.getComponentById(tmpIdArr[0]);
							 gridObj.setColumnNodeSet(tmpIdArr[1], "data:" + options.id, 
							                          scwin.COMMON_CODE_INFO.LABEL, scwin.COMMON_CODE_INFO.VALUE);
							 _$p.getComponentById( options.id ).setJSON (datajson);
						 }
					} else {
						// 7. wframe SELECTBOX 중 데이타 LIST BINDING 되어 있는지 않는 경우 DATACOLLECTION 생성후  공통코드 셋팅하는 CASE
						var wframe = _$p.getComponentById(paramOption.wframeId  ).getWindow();
						wframe.$p.data.create( options );
						wframe.$p.getComponentById( paramOption.compID ).setNodeSet("data:" +options.id, 
												    scwin.COMMON_CODE_INFO.LABEL , 
												    scwin.COMMON_CODE_INFO.VALUE);
						wframe.$p.getComponentById( options.id ).setJSON (datajson);
					}
				}	
			} else if ( typeof paramOption.dataList !== "undefined" && paramOption.dataList){
				var addOption = paramOption.addOption || false;
				if ( typeof paramOption.wframeId === "undefined" || paramOption.wframeId == "" ){
					// 4. 메인화면 데이타 리스트에   공통코드 셋팅하는 CASE ( 데이타리스트 존재햐야함 )
					_$p.getComponentById(paramOption.dataList).setJSON (datajson ,addOption );
				} else {
					// 8. wframe데이타 리스트에   공통코드 셋팅하는 CASE ( 데이타리스트 존재해야함 )
					var wframe = _$p.getComponentById(paramOption.wframeId  ).getWindow();
					wframe.$p.getComponentById( paramOption.dataList).setJSON (datajson , addOption);
				}
			}	
		}
		if ( typeof mainCallbackFunc === "function"){
			//dltCodeList.removeColumnFilterAll();
			mainCallbackFunc();
			
		} else if ( typeof mainCallbackFunc === "string"){
			//dltCodeList.removeColumnFilterAll();
			
			eval ( scopeId + mainCallbackFunc +"()" );
		}  
		
	};

	scwin.getCodeDataListInfo = function( _$p ){
		return scwin.COMMON_CODE_INFO;	
	}
/**
 * 호출한 메인화면의 scope id를 return한다.
 *
 * @date 2020.02.01
 * @param {Object} _$p setCommonCode를 호출한 화면의 scope을 가진 WebSquare util 객체
 * @memberOf commonCodeProject
 * @author InswaveSystems
 */
 	scwin.getScopeId = function( _$p ){
		var currDate = new Date();
		var scopeId = _$p.id + "@"+currDate.getTime();
		return scopeId;
	};

/////////////////////////////////////////////////
/////////////////////////////////////////////////
//		                                       //
//		common code project udc end            //
//		                                       //
/////////////////////////////////////////////////	
/////////////////////////////////////////////////




/////////////////////////////////////////////////
/////////////////////////////////////////////////
//		                                       //
//		Transaction project udc start          //
//		                                       //
/////////////////////////////////////////////////	
/////////////////////////////////////////////////

/**
 * 서버 통신 확장 모듈, Submission를 실행합니다.
 * 
 * @date 2017.11.30
 * @param {Object} sbmObj submission 객체
 * @param {Object} requestData [Default : null, JSON, XML] 요청 데이터로 submission에 등록된 ref를 무시하고 현재의 값이 할당된다.
 * @param {Object} compObj [Default : null] 전송중 disable시킬 컴퍼넌트
 * @memberOf com
 * @author InswaveSystems
 */
	scwin.executeSubmission = function(_$p , sbmObj, requestData, compObj) {
		_$p.executeSubmission(sbmObj, requestData, compObj);
	};
	
	


/**
 * Submission를 실행합니다.
 *
 * @date 2017.01.19
 * @param {Object} options com.createSubmission의 options 참고
 * @param {Object} requestData 요청 데이터
 * @param {Object} obj 전송중 disable시킬 컴퍼넌트
 * @memberOf com
 * @author InswaveSystems
 * @example
 * var searchCodeGrpOption = {
 *		 id : "sbm_searchCodeGrp",
 *		 action : "serviceId=CD0001&action=R",
 *		 target : 'data:json,{"id":"dlt_codeGrp","key":"data"}',
 *		 submitDoneHandler : scwin.searchCodeGrpCallback, isShowMeg : false };
 * $c.common.executeSubmission_dynamic(_$p, searchCodeGrpOption);
 */
	scwin.executeSubmission_dynamic = function(_$p, options, requestData, obj) {
		var submissionObj = _$p.getSubmission(options.id);
	
		if (submissionObj === null) {
			scwin.createSubmission(_$p, options);
			submissionObj = _$p.getSubmission(options.id);
		} else {
			_$p.deleteSubmission(options.id);
			scwin.createSubmission(_$p, options);
			submissionObj = _$p.getSubmission(options.id);
		}
		
		scwin.executeSubmission(_$p, submissionObj, requestData, obj);
		
		console.log( " $c.common.executeSubmission_dynamic ");
	};	



/**
 * Submission 객체를 동적으로 생성한다.
 *
 * @date 2017.11.30
 * @param {Object} options Submission 생성 옵션 JSON 객체
 * @param {String} options.id submission 객체의 ID. 통신 모듈 실행 시 필요.
 * @param {String} options.ref 서버로 보낼(request) DataCollection의 조건 표현식.(조건에 때라 표현식이 복잡하다) 또는 Instance Data의 XPath.
 * @param {String} options.target 서버로 응답(response) 받은 데이터가 위치 할 DataCollection의 조건 표현식. 또는 Instance Data의 XPath.
 * @param {String} options.action 통신 할 서버 측 URI.(브라우저 보안 정책으로 crossDomain은 지원되지 않는다.)
 * @param {String} options.method [default: get, post, urlencoded-post] 
 * - get : 파라메타를 url에 붙이는 방식 (HTML과 동일).
 * - post : 파라메타를 body 구간에 담는 방식 (HTML과 동일) 
 * - urlencoded-post : urlencoded-post.
 * @param {String} options.mediatype [default: application/xml, text/xml, application/json, application/x-www-form-urlencoded]
 * application/x-www-form-urlencoded 웹 form 방식(HTML방식). application/json : json 방식. application/xml : XML 방식. text/xml : xml방식
 * (두 개 차이는 http://stackoverflow._com/questions/4832357 참조)
 * @param {String} options.mode [default: synchronous, synchronous] 서버와의 통신 방식.  asynchronous:비동기식.  synchronous:동기식
 * @param {String} options.encoding [default: utf-8, euc-kr, utf-16] 서버 측 encoding 타입 설정 (euc-kr/utf-16/utf-8)
 * @param {String} options.replace [default: none, all, instance] action으로부터 받은 response data를 적용 구분 값.
 *   - all : 문서 전체를 서버로부터 온 응답데이터로 교체.  
 *   - instance : 해당되는 데이터 구간.  
 *   - none : 교체안함.
 * @param {String} options.processMsg submission 통신 중 보여줄 메세지.
 * @param {String} options.errorHandler submission오류 발생 시 실행 할 함수명.
 * @param {String} options.customHandler submssion호출 시 실행 할 함수명.
 * @param {requestCallback} options.submitHandler {script type="javascript" ev:event="xforms-submit"} 에 대응하는 함수.
 * @param {requestCallback} options.submitDoneHandler {script type="javascript" ev:event="xforms-submit-done"} 에 대응하는 함수
 * @param {requestCallback} options.submitErrorHandler {script type="javascript" ev:event="xforms-submit-error"} 에 대응하는 함수
 * @memberOf com
 * @author InswaveSystems
 * @example
 * com.createSubmission(options);
	 */
	scwin.createSubmission = function(_$p , options) {
		var ref = options.ref || "";
		var target = options.target || "";
		var action = options.action; // ajax 요청주소
		var mode = options.mode || "asynchronous"; // asynchronous(default)/synchronous
		var mediatype = options.mediatype || "application/json"; // application/x-www-form-urlencoded
		var method = (options.method || "post").toLowerCase(); // get/post/put/delete
		var processMsg = options.processMsg || "";
		var instance = options.instance || "none";
	
		var submitHandler = (typeof options.submitHandler === "function") ? options.submitHandler
				: ((typeof options.submitHandler === "string") ? _$p.id + options.submitHandler : "");
		var submitDoneHandler = (typeof options.submitDoneHandler === "function") ? options.submitDoneHandler
				: ((typeof options.submitDoneHandler === "string") ? _$p.id + options.submitDoneHandler : "");
		var submitErrorHandler = (typeof options.submitErrorHandler === "function") ? options.submitErrorHandler
				: ((typeof options.submitErrorHandler === "string") ? _$p.id + options.submitErrorHandler : "");
	
		var isShowMeg = false;
		var resJson = null;
	
		if ((options.isProcessMsg === true) && (processMsg === "")) {
			processMsg = "해당 작업을 처리중입니다";
		}
	
		if (typeof options.isShowMeg !== "undefined") {
			isShowMeg = options.isShowMeg;
		}
	
		var submissionObj = {
			"id" : options.id, // submission 객체의 ID. 통신 모듈 실행 시 필요.
			"ref" : ref, // 서버로 보낼(request) DataCollection의 조건 표현식.(조건에 때라 표현식이 복잡하다) 또는 Instance Data의 XPath.
			"target" : target, // 서버로 응답(response) 받은 데이터가 위치 할 DataCollection의 조건 표현식. 또는 Instance Data의 XPath.
			"action" : action, // 통신 할 서버 측 URI.(브라우저 보안 정책으로 crossDomain은 지원되지 않는다.)
			"method" : method, // [default: post, get, urlencoded-post] get:파라메타를 url에 붙이는 방식 (HTML과 동일).
			// post:파라메타를 body 구간에 담는 방식 (HTML과 동일). urlencoded-post:urlencoded-post.
			"mediatype" : mediatype, // application/json
			"encoding" : "UTF-8", // [default: utf-8, euc-kr, utf-16] 서버 측 encoding 타입 설정 (euc-kr/utf-16/utf-8)
			"mode" : mode, // [default: synchronous, synchronous] 서버와의 통신 방식. asynchronous:비동기식. synchronous:동기식
			"processMsg" : processMsg, // submission 통신 중 보여줄 메세지.
			"submitHandler" : submitHandler,
			"submitDoneHandler" : submitDoneHandler,
			"submitErrorHandler" : submitErrorHandler
		};
	
		_$p.createSubmission(submissionObj);
	};


/**
 * 서버에서 전송한 통신 결과 코드를 반환한다.
 * 화면에 정의한 submission의 submitdone이벤트에서 호출하여 사용한다.
 * 
 * @date 2016.07.29
 * @param {Object} e submission 후 callback의 상태값
 * @memberOf com
 * @author InswaveSystems
 * @return {String} 상태 코드
 * @example
 * // 통신결과 코드가 있을 경우
 * com.getResultCode(e);
 * // return 예시) E || S || W
 *
 * // 통신결과 코드가 없을 경우
 * com.getResultCode(e);
 * // return 예시) 웹스퀘어5 로그창 - 결과 상태 메세지가 없습니다.: com.getResultCode
 */
	scwin.getResultCode = function(_$p, e) {
		var rsCode = "";
		try {
			rsCode = e.responseJSON.rsMsg.statusCode;
		} catch (ex) {
			_$p.log("결과 상태 메세지가 없습니다.: $c.common.getResultCode");
		}
		return rsCode;
	};
	

/**
 * statusCode값에 따라 message를 출력한다.
 * 
 * @private
 * @date 2016.08.09
 * @param {Object} resultData 상태코드값 및 메시지가 담긴 JSON.
 * @param {String} resultData.message 메시지
 * @param {String} resultData.statusCode 상태코드값
 * @memberOf com
 * @author InswaveSystems
	 */
	 
	 
	scwin.resultMsg = function(resultData) {
		
		resultData.message = resultData.message || "";
		var msgCode = gcm.MESSAGE_CODE;
	
		switch (resultData.statusCode) {
		case msgCode.STATUS_ERROR:
			if (resultData.errorCode == "E0001") {
				com.alert(resultData.message + " 로그인 화면으로 이동하겠습니다.", "com.goHome");
			} else if (resultData.errorCode == "E9998") { // HTTP ERROR ex)404,500,0
				resultData.message = resultData.message;
			} else if (resultData.errorCode == "E9999") { // business logic error
				resultData.message = resultData.message;
			}
			break;
		case "N":
			resultData.statusCode = msgCode.STATUS_ERROR;
			resultData.message = "서버가 정지된 상태입니다. 자세한 내용은 관리자에게 문의하시기 바랍니다.";
			break;
		default:
		}
	
		if (typeof $p.top().scwin.setResultMessage == "function") {
			$p.top().scwin.setResultMessage(resultData);
		}
	};


/**
 * 모든 submission의 defaultCallback - com.sbm_errorHandler 보다 먼저 수행됨. (400 Error)
 * config.xml에 설정
 * 
 * @private
 * @date 2016.11.15
 * @param {Object} resObj responseData 객체
 * @param {Object} subObj Submission 객체
 * @memberOf
 * @author InswaveSystems
 */
scwin._sbm_defCallbackSubmission = function(resObj, subObj) {
	
debugger;
	// server와 연결을 할 수 없을 경우 responseStatusCode가 0으로 발생.
	if (resObj.responseStatusCode == 0) {
		var detailStr = "HTTP STATUS INFO";
		detailStr += resObj.responseStatusCode;
		detailStr += "URI:";
		detailStr += resObj.resourceUri;

		var msgObj = {
			statusCode : "E",
			errorCode : "E9998",
			message : "서버와 연결할 수 없습니다. 자세한 내용은 관리자에게 문의하시기 바랍니다.",
			messageDetail : detailStr
		};

		scwin.resultMsg(msgObj);

		return false;
	}

	var rsJSON = resObj.responseJSON || null;
	if (rsJSON && rsJSON.rsMsg) {
		scwin.resultMsg(rsJSON.rsMsg);
	}
};

/////////////////////////////////////////////////
/////////////////////////////////////////////////
//		                                       //
//		Transaction project udc end            //
//		                                       //
/////////////////////////////////////////////////	
/////////////////////////////////////////////////

	
	
	
/////////////////////////////////////////////////
/////////////////////////////////////////////////
//		                                       //
//		Data Collection project udc start      //
//		                                       //
/////////////////////////////////////////////////	
/////////////////////////////////////////////////

	
/**
 * dataList create ( 동일한 이름의 dataList가 존재할 경우 삭제후 재생성  )
 * 
 * @date 2020.12.24
 * @param {Object:Y} _$p  common Project 를 호출한( or dataList를 생성하고자 하는 ) Page의 scope을 가진 WebSquare util 객체 
 * @param {String:Y} dataListId dataList의 id
 * @param {Array:Y}  columnInfoList - column 정보( id, name,dataType ) 가 있는 JSON 1차원 배열.
 * @param {String:N} baseNode 명 ( default : list )
 * @param {String:N} repeatNode 명 ( default : map )
 * @author InswaveSystems
 */	
	scwin.createDataList = function ( _$p , dataListId , columnInfoList , baseNode , repeatNode ) {
		
		var baseNodeId = baseNode ? baseNode : "list";
		var repeatNodeId = repeatNode ?  repeatNode : "map";
		
		_$p.data.remove(dataListId);
		var options = {
						"id" : dataListId,
						"type" : "dataList",
						"option":{ 
				                "baseNode":baseNodeId ,
				                "repeatNode":repeatNodeId
								},
				        "columnInfo": columnInfoList 
		};
		
		_$p.data.create(options);
		
	};
	
/**
 * dataMap create ( 동일한 이름의 dataMap 이 존재할 경우 삭제후 재생성  )
 * 
 * @date 2020.12.24
 * @param {Object:Y} _$p  common Project 를 호출한( or dataMap을 생성하고자 하는 ) Page의 scope을 가진 WebSquare util 객체 
 * @param {String:Y} dataMapId dataMap의 id
 * @param {Array:Y}  keyInfoList - dataMap 정보( id, name,dataType ) 가 있는 JSON 1차원 배열.
 * @param {String:N} baseNode 명 ( default : map )
 * @author InswaveSystems
 */	
	scwin.createDataMap  = function ( _$p , dataMapId , keyInfoList , baseNode  ) {
		var baseNodeId = baseNode ? baseNode : "map";
		_$p.data.remove(dataMapId);
		var options = {
						"id" : dataMapId,
						"type" : "dataMap",
						"option":{ 
				                "baseNode":baseNodeId ,
								},
				        "keyInfo": keyInfoList 
		};
		_$p.data.create(options);
		
	};
	
	
/////////////////////////////////////////////////
/////////////////////////////////////////////////
//		                                       //
//		Data Collection project udc end        //
//		                                       //
/////////////////////////////////////////////////	
/////////////////////////////////////////////////	



/////////////////////////////////////////////////
/////////////////////////////////////////////////
//		                                       //
//   Popup / Message(popup) project udc start  //
//		                                       //
/////////////////////////////////////////////////	
/////////////////////////////////////////////////	

/**
 * Alert 메시지 창을 호출한다.
 *
 * @date 2017.12.30
 * @memberOf com
 * @param {String} messageStr 메시지
 * @param {String} closeCallbackFncName 콜백 함수명
 * @author Inswave Systems
 * @example
 * c.common.alert("우편번호를 선택하시기 바랍니다.");
 * c.common.alert("우편번호를 선택하시기 바랍니다.", "scwin.alertCallBack");
 */
	scwin.alert = function( _$p, messageStr, closeCallbackFncName) {
		scwin.messagBox(_$p, "alert", messageStr, closeCallbackFncName);
	};



/**
 * Confirm 메시지 창을 호출한다.
 * 
 * @date 2016.10.09
 * @memberOf com
 * @param {String} messageStr 메시지
 * @param {String} closeCallbackFncName 콜백 함수명
 * @author Inswave Systems
 * @example
 * com.confirm("변경된 코드 그룹 정보를 저장하시겠습니까?", "scwin.saveCodeGrpConfirmCallback");
 * com.confirm("하위에 새로운 조직을 추가하시겠습니까?", "scwin.insertConfirmCallBack");
 */
	scwin.confirm = function(_$p, messageStr, closeCallbackFncName) {
		scwin.messagBox(_$p, "confirm", messageStr, closeCallbackFncName);
	};

/**
 * 메세지 팝업을 호출한다.
 *
 * @date 2017.12.30
 * @param {String} messageType 팝업창 타입 (alert || confirm)
 * @param {String} messageStr 메시지
 * @param {String} closeCallbackFncName 콜백 함수명
 * @param {Boolean} isReturnValue Confirm 창인 경우 선택 결과(boolean)을 반환할지 여부
 * @param {String} title 팝업창 타이틀
 * @memberOf com
 * @author Inswave Systems
 * @example
 * //alert창을 띄울 경우
 * scwin.callback = function(){
 *	 console.log("콜백 함수입니다.");
 * };
 * com.messagBox("alert", "보낼 메시지", "callback", false, "팝업 타이틀");
 *
 * //confirm창을 띄울 경우
 * scwin.callback = function(){
 *	 console.log("콜백 함수입니다.");
 * };
 * com.messagBox("confirm", "보낼 메시지", "callback", true, "팝업 타이틀"); //isReturnValue속성에 false 사용가능
 */
	scwin.messagBox = function(_$p , messageType, messageStr, closeCallbackFncName, isReturnValue, title) {
		var messageStr = messageStr || "";
		var messageType = messageType || "alert";
		var defaultTitle = null;
		var popId = messageType || "Tmp";
		popId = popId + com.MESSAGE_BOX_SEQ++;
	
		if (messageType === "alert") {
			defaultTitle = "Alert";
		} else {
			defaultTitle = "Confirm";
		}
	
		if (typeof isReturnValue === "undefined") {
			isReturnValue = false;
		}
	
		// closeCallBackFnc 정보관리
		if (typeof closeCallbackFncName == "function") {
			var cbFuncIdx = ++scwin.CB_FUNCTION_MANAGER["cbFuncIdx"];
			var idx = "__close_callback_Func__" + new Date().getTime() + "_" + cbFuncIdx;
			scwin.CB_FUNCTION_MANAGER["cbFuncSave"][_$p.id + idx] = closeCallbackFncName;
			closeCallbackFncName = idx;
		}
	
		var data = {
			"message" : messageStr,
			"callbackFn" : closeCallbackFncName,
			"isReturnValue" : isReturnValue,
			"messageType" : defaultTitle
		};
		
		var options = {
			id : popId,
			popupName : defaultTitle,
			title : title || defaultTitle,
			width : 380,
			height : 220
		};
		scwin.openPopup(_$p, "/cm/xml/message_box.xml", options, data);
	};



/**
 * 팝업창을 연다.
 * 
 * @date 2016.10.09
 * @param {String} url url 화면경로
 * @param {Array} options Popup창 옵션
 * @param {String} [options.id] Popup창 아이디
 * @param {String} [options.type] 화면 오픈 타입 ("iframePopup", "wframePopup", "browserPopup")
 * @param {String} [options.width] Popup창 넓이
 * @param {String} [options.height] Popup창 높이
 * @param {String} [options.popupName] useIframe : true시 popup 객체의 이름으로 popup 프레임의 표시줄에 나타납니다.
 * @param {String} [options.useIFrame] [default : false] true : IFrame 을 사용하는 WebSquare popup / false: window.open 을 사용하는 popup
 * @param {String} [options.style] Popup의 스타일을 지정합니다. 값이 있으면 left top width height는 적용되지 않습니다.
 * @param {String} [options.resizable] [default : false]
 * @param {String} [options.modal] [default : false]
 * @param {String} [options.scrollbars] [default : false]
 * @param {String} [options.title] [default : false]
 * @param {String} [options.notMinSize] [default : false]
 * @memberOf com
 * @author Inswave Systems
 * @example
 * var data = { data : dma_authority.getJSON(), callbackFn : "scwin.insertMember" };
 * var options = { id : "AuthorityMemberPop", 
 *				 popupName : "직원 조회", 
 *				 modal : true, 
 *				 width : 560, height: 400 };
 * com.openPopup("/ui/BM/BM002P01.xml", options, data); 
	 */
	scwin.openPopup = function(_$p, url, opt, data) {
		scwin._openPopup(_$p, url, opt, data);
	};
	
	scwin._openPopup = function(_$p, url, opt, data) {
	
		var _dataObj = {
			type : "json",
			data : data,
			name : "param"
		};
	
		var width = opt.width || 500;
		var height = opt.height || 500;
		try {
			var deviceWidth = parseFloat($("body").css("width"));
			var deviceHeight = parseFloat($("body").css("height"));
			if (!opt.notMinSize) {
				if (deviceWidth > 0 && width > deviceWidth) {
					width = deviceWidth - 4; // 팝업 border 고려
				}
	
				if (deviceHeight > 0 && height > deviceHeight) {
					height = deviceHeight - 4; // 팝업 border 고려
				}
			}
		} catch (e) {
	
		}
	
		var top = ((document.body.offsetHeight / 2) - (parseInt(height) / 2) + $(document).scrollTop()) + "px";
		var left = ((document.body.offsetWidth / 2) - (parseInt(width) / 2) + $(document).scrollLeft()) + "px";
	
		if (typeof _dataObj.data.callbackFn === "undefined") {
			_dataObj.data.callbackFn = "";
		} else {
			_dataObj.data.callbackFn = _$p.id + _dataObj.data.callbackFn;
		}
	
		var options = {
			id : opt.id,
			popupName : opt.popupName || "",
			type : opt.type || "wframePopup",
			width : width + "px",
			height : height + "px",
			top : opt.top || top || "140px",
			left : opt.left || left || "500px",
			modal : (opt.modal == false) ? false : true,
			dataObject : _dataObj,
			alwaysOnTop : opt.alwaysOnTop || false,
			useModalStack : (opt.useModalStack == false) ? false : true,
			resizable : (opt.resizable == false) ? false : true,
			useMaximize : opt.useMaximize || false
		};
		_$p.openPopup(url, options);
	};



/**
 * 팝업창을 닫는다. callbackStr을 이용하여 부모창의 callback함수를 호출한다.
 * 
 * @date 2016.10.09
 * @memberOf com
 * @param {String} popId popup창 id로 값이 없을 경우 현재창의 아이디(this.popupID) close.
 * @param {String} [callbackStr] callbackFunction명으로 부모 객체는 opener || parent으로 참조한다. opener || parent가 없을 경우 window 참조.
 * @param {String} [returnValue] callbackFunction에 넘겨줄 파라메터로 String타입을 권장한다.
 * @author Inswave Systems
 * @example
 * com.closePopup();
 * com.closePopup("scwin.zipPopupCallback" , '{message:"정상처리되었습니다"}');
 * com.closePopup("scwin.zipPopupCallback" , '정상처리되었습니다.');
*/
	scwin.closePopup = function( _$p, callbackFnStr, retObj, callbackYn, selectedIdx) {
		scwin._closePopup(_$p, _$p.getPopupId(), callbackFnStr, com.strSerialize(retObj), window); // IFrame일 경우, 메모리릭을 없애기 위한 코딩. (부모/자식 간 페이지로 객체
		// 파라미터 전달 방식은 비권장. 문자열 전달 권장.)
	};
	
	scwin._closePopup = function( _$p, popId, callbackFnStr, retStr, winObj) {
		
		debugger;
		if ((typeof callbackFnStr !== "undefined") && (callbackFnStr !== "")) {
			var func;
			if (callbackFnStr.indexOf("__close_callback_Func__") > -1) {
				func = scwin.CB_FUNCTION_MANAGER["cbFuncSave"][callbackFnStr];
				delete scwin.CB_FUNCTION_MANAGER["cbFuncSave"][callbackFnStr];
			} else {
				func = winObj.WebSquare.util.getGlobalFunction(callbackFnStr);
			}
	
			if (func) {
				_$p.closePopup(popId);
				func(com.getJSON(retStr));
			} else {
				var parentObj = opener || parent;
				if (winObj.$p.getParameter("w2xPath") !== parentObj.$p.getParameter("w2xPath")) {
					scwin._closePopup( _$p , popId, callbackFnStr, retStr, parentObj);
					return;
				}
				_$p.closePopup(popId);
			}
		} else {
			_$p.closePopup(popId);
		}
	};


/////////////////////////////////////////////////
/////////////////////////////////////////////////
//		                                       //
//   Popup / Message(popup) project udc end  //
//		                                       //
/////////////////////////////////////////////////	
/////////////////////////////////////////////////	

	]]></script>
	</head>
	<body ev:onpageload="scwin.onpageload">
	</body>
</html>
